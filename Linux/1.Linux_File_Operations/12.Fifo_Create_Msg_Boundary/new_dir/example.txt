5.1 背景简介
操作系统最初的原型是一种批处理系统（batch）：在最开始我们把正在执行的程序称为作业，操作员将
所有的作业放在一起，由批处理系统进行读取并交给计算机执行，当一个作业执行完成以后，批处理系
统会自动地取出下一个作业。在批处理系统中，存在的最严重的问题是任务执行的过程，会经常需要等
待IO操作，这会导致CPU经常性地空闲。
为了充分提高CPU的利用率，一种解决方案是引入多道程序设计，在内存当中划分多个区域，每个区域
存储一个作业的指令和数据，当其中一个作业在等待IO操作时，另外一个作业可以使用CPU。
除了希望充分利用CPU资源，程序员还希望自己的对计算机的操作能够得到迅速的响应，这种需求导致
了分时系统的诞生。在分时系统中，操作系统会给每个作业分配一些时间来使用CPU，这样CPU就不会
沉浸在一个大型的作业中，期间的用户操作也会很快地得到响应。
由于同时执行多个作业，所以计算机需要提供一种优雅的方式来在各个任务之间来分配CPU，并且同一
时间也会有多个作业的数据和指令在内存当中驻留。传统的基于硬件的CPU和内存保护机制显得十分复
杂，并且程序员编写程序的时候需要花费很多心智负担来考虑计算机硬件的限制。因此，操作系统在计
算机硬件和用户之间引入一个中间层——进程。在用户的视角中，会把运行中的程序看成一个进程，每
个进程拥有自己独立的CPU和内存资源，并且可以管理各种其他所有资源，当然这种看起来的独占都是
虚拟的；操作系统的作用就要管理真实、复杂和丑陋的底层硬件，为用户视角当中简单且美好的进程来
提供支持。
5.2 进程的概念
通过对操作系统发展史的简单回顾，我们就可以给进程下一个完善的定义了。
从用户的角度来看，进程是一个程序的动态执行过程。程序是静态文件，是一系列二进制指令和数据的
集合，程序通常存储在磁盘当中。进程则是动态的，当程序被触发以后（比如用户启动程序或者被其他
进程启动程序），启动者的权限和属性以及程序的指令和数据会被加载到内存当中，并且占用CPU和其
他系统资源动态地执行指令和读写数据。进程的状态会在动态地在创建、调度、运行和消亡之间转换。
从操作系统的角度来看，进程是各种计算机资源分配的基本单位。操作系统需要提供支持让每个进程以
为自己能够独占CPU和内存等资源——即所谓的虚拟CPU和虚拟内存。每个进程需要占用CPU资源以执
行程序指令；而除了需要占用CPU资源以外，进程还需要占据存储资源来保存状态。进程需要保存的内
容包括数据段、代码段、堆以及其他内存空间，进程也需要占用资源管理打开的文件、挂起的信号、内
核内部数据、处理器状态、存在内存映射的内存空间以及执行线程，而执行线程的信息则包含程序计数
器、栈和寄存器状态。
5.3 虚拟CPU和虚拟内存
5.3.1 虚拟CPU
利用进程机制，所有的现代操作系统都支持在同一个时间来完成多个任务。尽管某个时刻，真实的CPU
只能运行一个进程，但是从进程自己的角度来看，它会认为自己在独享CPU（即虚拟CPU），而从用户
的角度来看多个进程在一段时间内是同时执行的，即并发执行。在实际的实现中，操作系统会使用调度
器来分配CPU资源。调度器会根据策略和优先级来给各个进程一定的时间来占用CPU，进程占用CPU时
间的基本单位称为时间片，当进程不应该使用CPU资源时，调度器会抢占CPU的控制权，然后快速地切
换CPU的使用进程。这种切换在用户的视角中对程序执行毫无影响，可以认为是透明的。由于切换进程
消耗的时间和每个进程实际执行的时间片是在非常小的，以至于用户无法分辨，所以在用户看起来，多
个进程是在同时运行的。